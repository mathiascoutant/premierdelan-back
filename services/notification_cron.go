package services

import (
	"fmt"
	"log"
	"premier-an-backend/database"
	"premier-an-backend/models"

	"github.com/robfig/cron/v3"
	"go.mongodb.org/mongo-driver/mongo"
)

// NotificationCron g√®re les notifications automatiques
type NotificationCron struct {
	eventRepo    *database.EventRepository
	fcmTokenRepo *database.FCMTokenRepository
	fcmService   *FCMService
	cron         *cron.Cron
}

// NewNotificationCron cr√©e une nouvelle instance
func NewNotificationCron(db *mongo.Database, fcmService *FCMService) *NotificationCron {
	return &NotificationCron{
		eventRepo:    database.NewEventRepository(db),
		fcmTokenRepo: database.NewFCMTokenRepository(db),
		fcmService:   fcmService,
		cron:         cron.New(),
	}
}

// Start d√©marre le cron job
func (nc *NotificationCron) Start() {
	// V√©rifier toutes les minutes si des √©v√©nements doivent ouvrir leurs inscriptions
	nc.cron.AddFunc("@every 1m", nc.checkEventOpenings)
	nc.cron.Start()
	log.Println("‚úì Cron job notifications d√©marr√© (v√©rification toutes les minutes)")
}

// Stop arr√™te le cron job
func (nc *NotificationCron) Stop() {
	nc.cron.Stop()
}

// checkEventOpenings v√©rifie si des √©v√©nements doivent ouvrir leurs inscriptions
func (nc *NotificationCron) checkEventOpenings() {
	events, err := nc.eventRepo.FindEventsToNotifyOpening()
	if err != nil {
		log.Printf("Erreur recherche √©v√©nements √† notifier: %v", err)
		return
	}

	if len(events) == 0 {
		return // Rien √† faire
	}

	log.Printf("üîî %d √©v√©nement(s) √† notifier pour ouverture d'inscriptions", len(events))

	for _, event := range events {
		nc.sendEventOpeningNotification(event)
		
		// Marquer comme envoy√©
		nc.eventRepo.Update(event.ID, map[string]interface{}{
			"notification_sent_opening": true,
		})
	}
}

// sendEventOpeningNotification envoie la notification d'ouverture √† tous les utilisateurs
func (nc *NotificationCron) sendEventOpeningNotification(event models.Event) {
	// R√©cup√©rer tous les tokens FCM
	allFCMTokens, err := nc.fcmTokenRepo.FindAll()
	if err != nil {
		log.Printf("Erreur r√©cup√©ration tokens FCM: %v", err)
		return
	}

	if len(allFCMTokens) == 0 {
		log.Println("‚ö†Ô∏è  Aucun token FCM enregistr√©")
		return
	}

	// Extraire les tokens
	var tokens []string
	for _, t := range allFCMTokens {
		tokens = append(tokens, t.Token)
	}

	// Pr√©parer la notification
	title := "üéâ Inscriptions ouvertes !"
	message := fmt.Sprintf("Les inscriptions pour '%s' sont maintenant ouvertes !", event.Titre)
	data := map[string]string{
		"action":   "event_opening",
		"url":      "/#evenements",
		"event_id": event.ID.Hex(),
	}

	// Envoyer via FCM
	success, failed, _ := nc.fcmService.SendToAll(tokens, title, message, data)
	log.Printf("üìß Notification ouverture '%s' envoy√©e: %d succ√®s, %d √©checs", event.Titre, success, failed)
}

