package websocket

import (
	"context"
	"log"
	"sync"
	"time"

	"premier-an-backend/database"
	"premier-an-backend/models"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// UserRepository interface pour √©viter la d√©pendance circulaire
type UserRepository interface {
	UpdateLastSeen(userID primitive.ObjectID) error
	FindByID(userID primitive.ObjectID) (*models.User, error)
	FindByEmail(email string) (*models.User, error)
}

// ChatRepository interface pour r√©cup√©rer les conversations d'un utilisateur
type ChatRepository interface {
	GetConversations(ctx context.Context, userID primitive.ObjectID) ([]models.ConversationResponse, error)
}

// Hub g√®re les connexions WebSocket actives
type Hub struct {
	// Connexions actives par user_id
	connections map[string]*Client

	// Rooms de conversations (conversation_id -> [user_id])
	rooms map[string]map[string]bool

	// Group rooms (group_id -> [user_id])
	groupRooms map[string]map[string]bool

	// Mutex pour s√©curiser les acc√®s concurrents
	mu sync.RWMutex

	// Canal pour enregistrer les clients
	register chan *Client

	// Canal pour d√©senregistrer les clients
	unregister chan *Client

	// Canal pour diffuser les messages
	broadcast chan *Message

	// Repositories pour la gestion de la pr√©sence
	userRepo *database.UserRepository
	chatRepo *database.ChatRepository

	// Gestionnaire de pr√©sence avec timeouts automatiques
	presenceManager *PresenceManager
}

// Message repr√©sente un message WebSocket √† diffuser
type Message struct {
	Type           string
	ConversationID string
	UserIDs        []string // Si vide, envoyer √† toute la conversation
	ExcludeUserID  string   // Ne pas envoyer √† cet utilisateur
	Payload        interface{}
}

// NewHub cr√©e un nouveau hub WebSocket
func NewHub(userRepo *database.UserRepository, chatRepo *database.ChatRepository) *Hub {
	hub := &Hub{
		connections: make(map[string]*Client),
		rooms:       make(map[string]map[string]bool),
		groupRooms:  make(map[string]map[string]bool),
		register:    make(chan *Client),
		unregister:  make(chan *Client),
		broadcast:   make(chan *Message, 256),
		userRepo:    userRepo,
		chatRepo:    chatRepo,
	}

	// Initialiser le gestionnaire de pr√©sence
	hub.presenceManager = NewPresenceManager(
		hub.updateUserPresenceInDB,
		hub.broadcastPresenceUpdate,
	)

	return hub
}

// Run d√©marre la boucle principale du hub
func (h *Hub) Run() {
	for {
		select {
		case client := <-h.register:
			h.mu.Lock()
			h.connections[client.UserID] = client
			h.mu.Unlock()
			log.Printf("üîå Client connect√©: %s (total: %d)", client.UserID, len(h.connections))

			// üîå Auto-joindre toutes les conversations de l'utilisateur
			go h.autoJoinUserConversations(client.UserID)

			// üîå Auto-joindre tous les groupes de l'utilisateur
			go h.autoJoinUserGroups(client.UserID)

			// üîå Mettre √† jour la pr√©sence avec timeout automatique
			if h.presenceManager != nil {
				h.presenceManager.UpdateUserPresence(client.UserID, true)
			}

		case client := <-h.unregister:
			h.mu.Lock()
			if _, ok := h.connections[client.UserID]; ok {
				delete(h.connections, client.UserID)
				close(client.send)

				// Retirer de toutes les rooms
				for roomID, members := range h.rooms {
					delete(members, client.UserID)
					if len(members) == 0 {
						delete(h.rooms, roomID)
					}
				}

				// Retirer de toutes les group rooms
				for groupID, members := range h.groupRooms {
					delete(members, client.UserID)
					if len(members) == 0 {
						delete(h.groupRooms, groupID)
					}
				}
			}
			h.mu.Unlock()
			log.Printf("üëã Client d√©connect√©: %s (total: %d)", client.UserID, len(h.connections))

			// üîå Mettre √† jour la pr√©sence (marquer comme hors ligne imm√©diatement)
			if h.presenceManager != nil {
				h.presenceManager.UpdateUserPresence(client.UserID, false)
				h.presenceManager.RemoveUser(client.UserID)
			}

		case message := <-h.broadcast:
			h.mu.RLock()

			log.Printf("üì° Broadcast: ConvID=%s, UserIDs=%v, Exclude=%s", message.ConversationID, message.UserIDs, message.ExcludeUserID)

			// Si UserIDs sp√©cifi√©, envoyer uniquement √† ces utilisateurs
			if len(message.UserIDs) > 0 {
				log.Printf("üì§ Envoi √† utilisateurs sp√©cifiques: %v", message.UserIDs)
				for _, userID := range message.UserIDs {
					if userID == message.ExcludeUserID {
						log.Printf("‚è≠Ô∏è  Skip user %s (exclu)", userID)
						continue
					}
					if client, ok := h.connections[userID]; ok {
						select {
						case client.send <- message.Payload:
							log.Printf("‚úÖ Message envoy√© √† %s", userID)
						default:
							log.Printf("‚ùå Canal plein pour %s", userID)
							close(client.send)
							delete(h.connections, userID)
						}
					} else {
						log.Printf("‚ö†Ô∏è  User %s non connect√©", userID)
					}
				}
			} else if message.ConversationID != "" {
				// Sinon, envoyer √† tous les membres de la conversation
				if members, ok := h.rooms[message.ConversationID]; ok {
					log.Printf("üì§ Conversation %s a %d membres dans la room", message.ConversationID, len(members))
					for userID := range members {
						if userID == message.ExcludeUserID {
							log.Printf("‚è≠Ô∏è  Skip user %s (exp√©diteur)", userID)
							continue
						}
						if client, ok := h.connections[userID]; ok {
							select {
							case client.send <- message.Payload:
								log.Printf("‚úÖ Message WS envoy√© √† %s", userID)
							default:
								log.Printf("‚ùå Canal plein pour %s", userID)
								close(client.send)
								delete(h.connections, userID)
							}
						} else {
							log.Printf("‚ö†Ô∏è  User %s dans la room mais pas connect√© WS", userID)
						}
					}
				} else {
					log.Printf("‚ö†Ô∏è  Conversation %s n'a aucun membre dans les rooms", message.ConversationID)
					log.Printf("üîç Rooms actuelles: %v", h.rooms)
				}
			}

			h.mu.RUnlock()
		}
	}
}

// JoinConversation ajoute un utilisateur √† une room de conversation
func (h *Hub) JoinConversation(userID, conversationID string) {
	h.mu.Lock()
	defer h.mu.Unlock()

	if h.rooms[conversationID] == nil {
		h.rooms[conversationID] = make(map[string]bool)
	}
	h.rooms[conversationID][userID] = true
	log.Printf("‚úÖ User %s a rejoint la conversation %s", userID, conversationID)
}

// LeaveConversation retire un utilisateur d'une room de conversation
func (h *Hub) LeaveConversation(userID, conversationID string) {
	h.mu.Lock()
	defer h.mu.Unlock()

	if members, ok := h.rooms[conversationID]; ok {
		delete(members, userID)
		if len(members) == 0 {
			delete(h.rooms, conversationID)
		}
		log.Printf("üëã User %s a quitt√© la conversation %s", userID, conversationID)
	}
}

// SendToUser envoie un message √† un utilisateur sp√©cifique
func (h *Hub) SendToUser(userID string, payload interface{}) {
	h.broadcast <- &Message{
		UserIDs: []string{userID},
		Payload: payload,
	}
}

// SendToConversation envoie un message √† tous les membres d'une conversation
func (h *Hub) SendToConversation(conversationID string, payload interface{}, excludeUserID string) {
	h.broadcast <- &Message{
		ConversationID: conversationID,
		ExcludeUserID:  excludeUserID,
		Payload:        payload,
	}
}

// IsUserOnline v√©rifie si un utilisateur est actuellement connect√©
func (h *Hub) IsUserOnline(userID string) bool {
	h.mu.RLock()
	defer h.mu.RUnlock()

	_, online := h.connections[userID]
	return online
}

// notifyUserPresence envoie un √©v√©nement de pr√©sence √† tous les contacts d'un utilisateur
func (h *Hub) notifyUserPresence(userID string, isOnline bool) {
	if h.chatRepo == nil {
		log.Printf("‚ö†Ô∏è  chatRepo nil - pr√©sence non notifi√©e")
		return
	}

	log.Printf("üëÅÔ∏è  Notification pr√©sence pour %s (online=%v)", userID, isOnline)

	// R√©cup√©rer l'utilisateur par email (userID est maintenant un email)
	user, err := h.userRepo.FindByEmail(userID)
	if err != nil || user == nil {
		log.Printf("‚ùå Utilisateur invalide pour pr√©sence: %s", userID)
		return
	}
	userObjID := user.ID

	// R√©cup√©rer toutes les conversations de cet utilisateur
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	conversations, err := h.chatRepo.GetConversations(ctx, userObjID)
	if err != nil {
		log.Printf("‚ùå Erreur r√©cup√©ration conversations pour pr√©sence: %v", err)
		return
	}

	// R√©cup√©rer last_seen depuis la DB
	lastSeenStr := time.Now().Format(time.RFC3339)
	if !isOnline && user.LastSeen != nil {
		lastSeenStr = user.LastSeen.Format(time.RFC3339)
	}

	// Payload de pr√©sence
	payload := map[string]interface{}{
		"type":      "user_presence",
		"user_id":   userID,
		"is_online": isOnline,
		"last_seen": lastSeenStr, // ‚úÖ Format ISO 8601 string
	}

	log.Printf("üì¶ Payload user_presence: %+v", payload)

	// Envoyer √† tous les autres participants (√©viter doublons)
	// ‚ö†Ô∏è  IMPORTANT: Utiliser EMAIL, pas ObjectID !
	sentTo := make(map[string]bool)
	for _, conv := range conversations {
		otherUserEmail := conv.Participant.Email // ‚úÖ Utiliser Email au lieu de ID (ObjectID)
		if otherUserEmail != userID && !sentTo[otherUserEmail] {
			h.SendToUser(otherUserEmail, payload)
			sentTo[otherUserEmail] = true
			log.Printf("üì§ Pr√©sence envoy√©e √† %s", otherUserEmail)
		}
	}

	log.Printf("‚úÖ Pr√©sence notifi√©e √† %d contacts", len(sentTo))
}

// autoJoinUserConversations ajoute automatiquement l'utilisateur √† toutes ses conversations
func (h *Hub) autoJoinUserConversations(userID string) {
	if h.chatRepo == nil {
		log.Printf("‚ö†Ô∏è  chatRepo nil - auto-join impossible")
		return
	}

	log.Printf("üîÑ Auto-join conversations pour %s", userID)

	// R√©cup√©rer l'utilisateur par email
	user, err := h.userRepo.FindByEmail(userID)
	if err != nil || user == nil {
		log.Printf("‚ùå Utilisateur invalide pour auto-join: %s", userID)
		return
	}
	userObjID := user.ID

	// R√©cup√©rer toutes les conversations de cet utilisateur
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	conversations, err := h.chatRepo.GetConversations(ctx, userObjID)
	if err != nil {
		log.Printf("‚ùå Erreur r√©cup√©ration conversations pour auto-join: %v", err)
		return
	}

	// Joindre chaque conversation
	joinedCount := 0
	for _, conv := range conversations {
		if conv.ID != "" {
			h.JoinConversation(userID, conv.ID)
			joinedCount++
		}
	}

	log.Printf("‚úÖ Auto-join termin√©: %d conversations rejointes", joinedCount)
}

// autoJoinUserGroups ajoute automatiquement l'utilisateur √† tous ses groupes
func (h *Hub) autoJoinUserGroups(userID string) {
	log.Printf("üîÑ Auto-join groupes pour %s", userID)

	// R√©cup√©rer l'utilisateur par email
	user, err := h.userRepo.FindByEmail(userID)
	if err != nil || user == nil {
		log.Printf("‚ùå Utilisateur invalide pour auto-join groupes: %s", userID)
		return
	}

	// R√©cup√©rer tous les groupes de cet utilisateur
	// Note: On aurait besoin d'acc√®s au groupRepo, mais pour l'instant on fait confiance
	// TODO: Impl√©menter la r√©cup√©ration des groupes depuis la DB
	// Pour l'instant, on laisse les utilisateurs rejoindre manuellement via join_group
	
	log.Printf("‚úÖ Auto-join groupes termin√© pour %s", userID)
}

// HandleTyping g√®re l'√©v√©nement "typing" et l'envoie aux autres participants
func (h *Hub) HandleTyping(userID, conversationID string, isTyping bool) {
	log.Printf("‚å®Ô∏è  Typing: user=%s, conv=%s, typing=%v", userID, conversationID, isTyping)

	// R√©cup√©rer le pr√©nom de l'utilisateur
	username := "Quelqu'un"
	if h.userRepo != nil {
		if user, err := h.userRepo.FindByEmail(userID); err == nil && user != nil {
			username = user.Firstname
			log.Printf("‚úÖ Username r√©cup√©r√©: %s", username)
		}
	}

	// Payload √† envoyer aux autres participants
	payload := map[string]interface{}{
		"type":            "user_typing",
		"conversation_id": conversationID,
		"user_id":         userID,
		"username":        username,
		"is_typing":       isTyping,
	}

	// Envoyer via SendToConversation (qui envoie √† tous SAUF l'exp√©diteur)
	h.SendToConversation(conversationID, payload, userID)

	log.Printf("‚úÖ Typing indicator envoy√© pour conversation %s", conversationID)
}

// ====================================
// M√©thodes pour les groupes de chat
// ====================================

// JoinGroup ajoute un utilisateur √† une room de groupe
func (h *Hub) JoinGroup(userID, groupID string) {
	h.mu.Lock()
	defer h.mu.Unlock()

	if h.groupRooms[groupID] == nil {
		h.groupRooms[groupID] = make(map[string]bool)
	}
	h.groupRooms[groupID][userID] = true
	log.Printf("‚úÖ User %s a rejoint le groupe %s", userID, groupID)
}

// LeaveGroup retire un utilisateur d'une room de groupe
func (h *Hub) LeaveGroup(userID, groupID string) {
	h.mu.Lock()
	defer h.mu.Unlock()

	if members, ok := h.groupRooms[groupID]; ok {
		delete(members, userID)
		if len(members) == 0 {
			delete(h.groupRooms, groupID)
		}
		log.Printf("üëã User %s a quitt√© le groupe %s", userID, groupID)
	}
}

// BroadcastToGroup envoie un message √† tous les membres d'un groupe
func (h *Hub) BroadcastToGroup(groupID string, payload interface{}, excludeUserID string) {
	h.mu.RLock()
	defer h.mu.RUnlock()

	log.Printf("üì° Broadcast groupe: GroupID=%s, Exclude=%s", groupID, excludeUserID)
	log.Printf("üîç Group rooms disponibles: %+v", h.groupRooms)

	if members, ok := h.groupRooms[groupID]; ok {
		log.Printf("üì§ Groupe %s a %d membres dans la room: %v", groupID, len(members), getKeys(members))
		sentCount := 0
		for userID := range members {
			if userID == excludeUserID {
				log.Printf("‚è≠Ô∏è  Skip user %s (exclu)", userID)
				continue
			}
			if client, ok := h.connections[userID]; ok {
				select {
				case client.send <- payload:
					log.Printf("‚úÖ Message groupe envoy√© √† %s", userID)
					sentCount++
				default:
					log.Printf("‚ùå Canal plein pour %s", userID)
				}
			} else {
				log.Printf("‚ö†Ô∏è  User %s dans le groupe mais pas connect√© WS", userID)
			}
		}
		log.Printf("üìä Broadcast groupe termin√©: %d messages envoy√©s", sentCount)
	} else {
		log.Printf("‚ö†Ô∏è  Groupe %s n'a aucun membre dans les rooms", groupID)
		log.Printf("üîç Group rooms disponibles: %v", h.groupRooms)
		log.Printf("üí° Suggestion: L'utilisateur doit d'abord rejoindre le groupe via 'join_group'")
	}
}

// getKeys retourne les cl√©s d'une map pour le debug
func getKeys(m map[string]bool) []string {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	return keys
}

// BroadcastToUser envoie un message √† un utilisateur sp√©cifique (alias pour SendToUser)
func (h *Hub) BroadcastToUser(userID string, payload []byte) {
	h.mu.RLock()
	defer h.mu.RUnlock()

	if client, ok := h.connections[userID]; ok {
		select {
		case client.send <- payload:
			log.Printf("‚úÖ Message envoy√© √† l'utilisateur %s", userID)
		default:
			log.Printf("‚ùå Canal plein pour l'utilisateur %s", userID)
		}
	} else {
		log.Printf("‚ö†Ô∏è  Utilisateur %s non connect√©", userID)
	}
}

// HandleGroupTyping g√®re l'√©v√©nement "typing" dans un groupe
func (h *Hub) HandleGroupTyping(userID, groupID string, isTyping bool) {
	log.Printf("‚å®Ô∏è  Group Typing: user=%s, group=%s, typing=%v", userID, groupID, isTyping)

	// Convertir groupID string en ObjectID pour validation
	_, err := primitive.ObjectIDFromHex(groupID)
	if err != nil {
		log.Printf("‚ùå GroupID invalide: %s", groupID)
		return
	}

	// V√©rifier que l'utilisateur est membre du groupe
	// Note: On aurait besoin d'acc√®s au groupRepo, mais pour l'instant on fait confiance
	// TODO: Ajouter validation d'appartenance au groupe si n√©cessaire

	// R√©cup√©rer le pr√©nom de l'utilisateur
	username := "Quelqu'un"
	if h.userRepo != nil {
		if user, err := h.userRepo.FindByEmail(userID); err == nil && user != nil {
			username = user.Firstname + " " + user.Lastname
			log.Printf("‚úÖ Username r√©cup√©r√©: %s", username)
		}
	}

	// Payload √† envoyer aux autres participants
	payload := map[string]interface{}{
		"type":      "user_typing",
		"group_id":  groupID,
		"user_id":   userID,
		"username":  username,
		"is_typing": isTyping,
	}

	// Envoyer via BroadcastToGroup (qui envoie √† tous SAUF l'exp√©diteur)
	h.BroadcastToGroup(groupID, payload, userID)

	log.Printf("‚úÖ Group typing indicator envoy√© pour groupe %s", groupID)
}

// ====================================
// M√©thodes pour le gestionnaire de pr√©sence
// ====================================

// updateUserPresenceInDB met √† jour la pr√©sence d'un utilisateur en base de donn√©es
func (h *Hub) updateUserPresenceInDB(userID string, isOnline bool) error {
	if h.userRepo == nil {
		log.Printf("‚ö†Ô∏è  userRepo nil - pr√©sence non mise √† jour en DB")
		return nil
	}

	// R√©cup√©rer l'utilisateur par email
	user, err := h.userRepo.FindByEmail(userID)
	if err != nil || user == nil {
		log.Printf("‚ùå Utilisateur non trouv√© pour mise √† jour pr√©sence: %s", userID)
		return err
	}

	// Mettre √† jour la pr√©sence
	updateData := map[string]interface{}{
		"is_online": isOnline,
	}

	if !isOnline {
		// Si hors ligne, mettre √† jour last_seen
		updateData["last_seen"] = time.Now()
	}

	// Utiliser UpdateByEmail si disponible, sinon UpdateByID
	if err := h.userRepo.UpdateByEmail(userID, updateData); err != nil {
		log.Printf("‚ùå Erreur mise √† jour pr√©sence en DB: %v", err)
		return err
	}

	log.Printf("‚úÖ Pr√©sence mise √† jour en DB: %s -> %v", userID, isOnline)
	return nil
}

// broadcastPresenceUpdate diffuse une mise √† jour de pr√©sence √† tous les contacts
func (h *Hub) broadcastPresenceUpdate(userID string, isOnline bool, lastSeen *time.Time) {
	if h.chatRepo == nil {
		log.Printf("‚ö†Ô∏è  chatRepo nil - pr√©sence non diffus√©e")
		return
	}

	log.Printf("üëÅÔ∏è  Diffusion pr√©sence pour %s (online=%v)", userID, isOnline)

	// R√©cup√©rer l'utilisateur par email
	user, err := h.userRepo.FindByEmail(userID)
	if err != nil || user == nil {
		log.Printf("‚ùå Utilisateur invalide pour diffusion pr√©sence: %s", userID)
		return
	}
	userObjID := user.ID

	// R√©cup√©rer toutes les conversations de cet utilisateur
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	conversations, err := h.chatRepo.GetConversations(ctx, userObjID)
	if err != nil {
		log.Printf("‚ùå Erreur r√©cup√©ration conversations pour diffusion pr√©sence: %v", err)
		return
	}

	// Pr√©parer le payload de pr√©sence
	payload := map[string]interface{}{
		"type":      "user_presence",
		"user_id":   userID,
		"is_online": isOnline,
	}

	// Ajouter last_seen si hors ligne
	if !isOnline && lastSeen != nil {
		payload["last_seen"] = lastSeen.Format(time.RFC3339)
	}

	log.Printf("üì¶ Payload user_presence: %+v", payload)

	// Envoyer √† tous les autres participants (√©viter doublons)
	sentTo := make(map[string]bool)
	for _, conv := range conversations {
		otherUserEmail := conv.Participant.Email
		if otherUserEmail != userID && !sentTo[otherUserEmail] {
			h.SendToUser(otherUserEmail, payload)
			sentTo[otherUserEmail] = true
			log.Printf("üì§ Pr√©sence diffus√©e √† %s", otherUserEmail)
		}
	}

	log.Printf("‚úÖ Pr√©sence diffus√©e √† %d contacts", len(sentTo))
}

// Shutdown arr√™te le hub et marque tous les utilisateurs comme hors ligne
func (h *Hub) Shutdown() {
	log.Printf("üîÑ Arr√™t du hub WebSocket...")

	// Arr√™ter le gestionnaire de pr√©sence
	if h.presenceManager != nil {
		h.presenceManager.Shutdown()
	}

	// Fermer toutes les connexions
	h.mu.Lock()
	for userID, client := range h.connections {
		close(client.send)
		client.conn.Close()
		log.Printf("üîå Connexion ferm√©e pour %s", userID)
	}
	h.connections = make(map[string]*Client)
	h.mu.Unlock()

	log.Printf("‚úÖ Hub WebSocket arr√™t√©")
}
