package websocket

import (
	"log"
	"sync"
)

// Hub g√®re les connexions WebSocket actives
type Hub struct {
	// Connexions actives par user_id
	connections map[string]*Client

	// Rooms de conversations (conversation_id -> [user_id])
	rooms map[string]map[string]bool

	// Mutex pour s√©curiser les acc√®s concurrents
	mu sync.RWMutex

	// Canal pour enregistrer les clients
	register chan *Client

	// Canal pour d√©senregistrer les clients
	unregister chan *Client

	// Canal pour diffuser les messages
	broadcast chan *Message
}

// Message repr√©sente un message WebSocket √† diffuser
type Message struct {
	Type           string
	ConversationID string
	UserIDs        []string // Si vide, envoyer √† toute la conversation
	ExcludeUserID  string   // Ne pas envoyer √† cet utilisateur
	Payload        interface{}
}

// NewHub cr√©e un nouveau hub WebSocket
func NewHub() *Hub {
	return &Hub{
		connections: make(map[string]*Client),
		rooms:       make(map[string]map[string]bool),
		register:    make(chan *Client),
		unregister:  make(chan *Client),
		broadcast:   make(chan *Message, 256),
	}
}

// Run d√©marre la boucle principale du hub
func (h *Hub) Run() {
	for {
		select {
		case client := <-h.register:
			h.mu.Lock()
			h.connections[client.UserID] = client
			h.mu.Unlock()
			log.Printf("üîå Client connect√©: %s (total: %d)", client.UserID, len(h.connections))

		case client := <-h.unregister:
			h.mu.Lock()
			if _, ok := h.connections[client.UserID]; ok {
				delete(h.connections, client.UserID)
				close(client.send)
				
				// Retirer de toutes les rooms
				for roomID, members := range h.rooms {
					delete(members, client.UserID)
					if len(members) == 0 {
						delete(h.rooms, roomID)
					}
				}
			}
			h.mu.Unlock()
			log.Printf("üëã Client d√©connect√©: %s (total: %d)", client.UserID, len(h.connections))

		case message := <-h.broadcast:
			h.mu.RLock()
			
			log.Printf("üì° Broadcast: ConvID=%s, UserIDs=%v, Exclude=%s", message.ConversationID, message.UserIDs, message.ExcludeUserID)
			
			// Si UserIDs sp√©cifi√©, envoyer uniquement √† ces utilisateurs
			if len(message.UserIDs) > 0 {
				log.Printf("üì§ Envoi √† utilisateurs sp√©cifiques: %v", message.UserIDs)
				for _, userID := range message.UserIDs {
					if userID == message.ExcludeUserID {
						log.Printf("‚è≠Ô∏è  Skip user %s (exclu)", userID)
						continue
					}
					if client, ok := h.connections[userID]; ok {
						select {
						case client.send <- message.Payload:
							log.Printf("‚úÖ Message envoy√© √† %s", userID)
						default:
							log.Printf("‚ùå Canal plein pour %s", userID)
							close(client.send)
							delete(h.connections, userID)
						}
					} else {
						log.Printf("‚ö†Ô∏è  User %s non connect√©", userID)
					}
				}
			} else if message.ConversationID != "" {
				// Sinon, envoyer √† tous les membres de la conversation
				if members, ok := h.rooms[message.ConversationID]; ok {
					log.Printf("üì§ Conversation %s a %d membres dans la room", message.ConversationID, len(members))
					for userID := range members {
						if userID == message.ExcludeUserID {
							log.Printf("‚è≠Ô∏è  Skip user %s (exp√©diteur)", userID)
							continue
						}
						if client, ok := h.connections[userID]; ok {
							select {
							case client.send <- message.Payload:
								log.Printf("‚úÖ Message WS envoy√© √† %s", userID)
							default:
								log.Printf("‚ùå Canal plein pour %s", userID)
								close(client.send)
								delete(h.connections, userID)
							}
						} else {
							log.Printf("‚ö†Ô∏è  User %s dans la room mais pas connect√© WS", userID)
						}
					}
				} else {
					log.Printf("‚ö†Ô∏è  Conversation %s n'a aucun membre dans les rooms", message.ConversationID)
					log.Printf("üîç Rooms actuelles: %v", h.rooms)
				}
			}
			
			h.mu.RUnlock()
		}
	}
}

// JoinConversation ajoute un utilisateur √† une room de conversation
func (h *Hub) JoinConversation(userID, conversationID string) {
	h.mu.Lock()
	defer h.mu.Unlock()

	if h.rooms[conversationID] == nil {
		h.rooms[conversationID] = make(map[string]bool)
	}
	h.rooms[conversationID][userID] = true
	log.Printf("‚úÖ User %s a rejoint la conversation %s", userID, conversationID)
}

// LeaveConversation retire un utilisateur d'une room de conversation
func (h *Hub) LeaveConversation(userID, conversationID string) {
	h.mu.Lock()
	defer h.mu.Unlock()

	if members, ok := h.rooms[conversationID]; ok {
		delete(members, userID)
		if len(members) == 0 {
			delete(h.rooms, conversationID)
		}
		log.Printf("üëã User %s a quitt√© la conversation %s", userID, conversationID)
	}
}

// SendToUser envoie un message √† un utilisateur sp√©cifique
func (h *Hub) SendToUser(userID string, payload interface{}) {
	h.broadcast <- &Message{
		UserIDs: []string{userID},
		Payload: payload,
	}
}

// SendToConversation envoie un message √† tous les membres d'une conversation
func (h *Hub) SendToConversation(conversationID string, payload interface{}, excludeUserID string) {
	h.broadcast <- &Message{
		ConversationID: conversationID,
		ExcludeUserID:  excludeUserID,
		Payload:        payload,
	}
}

